# Stubs for freezegun.api (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import datetime
import inspect
import time
from typing import Any, Optional

real_time = time.time
real_localtime = time.localtime
real_gmtime = time.gmtime
real_strftime = time.strftime
real_date = datetime.date
real_datetime = datetime.datetime
real_date_objects: Any
real_clock: Any
freeze_factories: Any
tz_offsets: Any
ignore_lists: Any
tick_flags: Any
# This line is generated by stubgen,
# the original is a try-except statement, falling back to str in Python 3
# string_type = basestring
string_type = str

real_uuid_generate_time: Any
uuid_generate_time_attr: str
real_uuid_create: Any
iscoroutinefunction = inspect.iscoroutinefunction

def with_metaclass(meta: Any, *bases: Any): ...

call_stack_inspection_limit: int

def get_current_time(): ...
def fake_time(): ...
def fake_localtime(t: Optional[Any] = ...): ...
def fake_gmtime(t: Optional[Any] = ...): ...
def fake_strftime(format: Any, time_to_format: Optional[Any] = ...): ...
def fake_clock(): ...

class FakeDateMeta(type):
    @classmethod
    def __instancecheck__(self, obj: Any): ...
    @classmethod
    def __subclasscheck__(cls, subclass: Any): ...

def datetime_to_fakedatetime(datetime: Any): ...
def date_to_fakedate(date: Any): ...

class FakeDate:
    def __new__(cls, *args: Any, **kwargs: Any): ...
    def __add__(self, other: Any): ...
    def __sub__(self, other: Any): ...
    @classmethod
    def today(cls): ...

class FakeDatetimeMeta(FakeDateMeta):
    @classmethod
    def __instancecheck__(self, obj: Any): ...
    @classmethod
    def __subclasscheck__(cls, subclass: Any): ...

class FakeDatetime:
    def __new__(cls, *args: Any, **kwargs: Any): ...
    def __add__(self, other: Any): ...
    def __sub__(self, other: Any): ...
    def astimezone(self, tz: Optional[Any] = ...): ...
    @classmethod
    def now(cls, tz: Optional[Any] = ...): ...
    def date(self): ...
    @property
    def nanosecond(self): ...
    @classmethod
    def today(cls): ...
    @classmethod
    def utcnow(cls): ...

def convert_to_timezone_naive(time_to_freeze: Any): ...
def pickle_fake_date(datetime_: Any): ...
def pickle_fake_datetime(datetime_: Any): ...

class TickingDateTimeFactory:
    time_to_freeze: Any = ...
    start: Any = ...
    def __init__(self, time_to_freeze: Any, start: Any) -> None: ...
    def __call__(self): ...

class FrozenDateTimeFactory:
    time_to_freeze: Any = ...
    def __init__(self, time_to_freeze: Any) -> None: ...
    def __call__(self): ...
    def tick(self, delta: Any = ...) -> None: ...
    def move_to(self, target_datetime: Any) -> None: ...

class StepTickTimeFactory:
    time_to_freeze: Any = ...
    step_width: Any = ...
    def __init__(self, time_to_freeze: Any, step_width: Any) -> None: ...
    def __call__(self): ...
    def tick(self, delta: Optional[Any] = ...) -> None: ...
    def update_step_width(self, step_width: Any) -> None: ...
    def move_to(self, target_datetime: Any) -> None: ...

class _freeze_time:
    time_to_freeze: Any = ...
    tz_offset: Any = ...
    ignore: Any = ...
    tick: Any = ...
    auto_tick_seconds: Any = ...
    undo_changes: Any = ...
    modules_at_start: Any = ...
    as_arg: Any = ...
    def __init__(
        self,
        time_to_freeze_str: Any,
        tz_offset: Any,
        ignore: Any,
        tick: Any,
        as_arg: Any,
        auto_tick_seconds: Any,
    ) -> None: ...
    def __call__(self, func: Any): ...
    def decorate_class(self, klass: Any): ...
    def __enter__(self): ...
    def __exit__(self, *args: Any) -> None: ...
    fake_names: Any = ...
    reals: Any = ...
    def start(self): ...
    def stop(self) -> None: ...
    def decorate_coroutine(self, coroutine: Any): ...
    def decorate_callable(self, func: Any): ...

def freeze_time(
    time_to_freeze: Optional[Any] = ...,
    tz_offset: int = ...,
    ignore: Optional[Any] = ...,
    tick: bool = ...,
    as_arg: bool = ...,
    auto_tick_seconds: int = ...,
): ...
def adapt_date(val: Any): ...
def adapt_datetime(val: Any): ...
