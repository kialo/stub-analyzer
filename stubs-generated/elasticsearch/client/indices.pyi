# Stubs for elasticsearch.client.indices (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Dict, List, Optional

from .utils import SKIP_IN_PATH, NamespacedClient, query_params

class IndicesClient(NamespacedClient):
    def analyze(self, index: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...) -> Dict[str, Any]: ...
    def refresh(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def flush(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def create(self, index, body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def get(self, index, feature: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def open(self, index, params: Optional[Any] = ...): ...
    def close(self, index, params: Optional[Any] = ...): ...
    def delete(self, index, ignore: Optional[List[int]]=None, params: Optional[Any] = ...): ...
    def exists(self, index, ignore: Optional[List[int]]=None, params: Optional[Any] = ...): ...
    def exists_type(self, index, doc_type, params: Optional[Any] = ...): ...
    def put_mapping(self, doc_type, body, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def get_mapping(self, index: Optional[Any] = ..., doc_type: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def get_field_mapping(self, fields, index: Optional[Any] = ..., doc_type: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def put_alias(self, index, name, body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def exists_alias(self, index: Optional[Any] = ..., name: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def get_alias(self, index: Optional[Any] = ..., name: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def update_aliases(self, body, params: Optional[Any] = ...): ...
    def delete_alias(self, index, name, params: Optional[Any] = ...): ...
    def put_template(self, name, body, params: Optional[Any] = ...): ...
    def exists_template(self, name, params: Optional[Any] = ...): ...
    def get_template(self, name: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def delete_template(self, name, params: Optional[Any] = ...): ...
    def get_settings(self, index: Optional[Any] = ..., name: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def put_settings(self, body, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def stats(self, index: Optional[Any] = ..., metric: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def segments(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def validate_query(self, index: Optional[Any] = ..., doc_type: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def clear_cache(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def recovery(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def upgrade(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def get_upgrade(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def flush_synced(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def shard_stores(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def forcemerge(self, index: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def shrink(self, index, target, body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def split(self, index, target, body: Optional[Any] = ..., params: Optional[Any] = ...): ...
    def rollover(self, alias, new_index: Optional[Any] = ..., body: Optional[Any] = ..., params: Optional[Any] = ...): ...
