# Stubs for passlib.hash (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

import passlib.handlers.argon2
import passlib.handlers.bcrypt
import passlib.handlers.ldap_digests
import passlib.handlers.md5_crypt
import passlib.handlers.pbkdf2
import passlib.handlers.sha2_crypt
import passlib.utils.handlers

class apr_md5_crypt(passlib.handlers.md5_crypt._MD5_Common):
    _abc_cache: Any = ...
    _abc_negative_cache: Any = ...
    _abc_negative_cache_version: Any = ...
    _abc_registry: Any = ...
    _calc_checksum: Any = ...
    ident: Any = ...
    name: Any = ...
    __abstractmethods__: Any = ...

class argon2(passlib.handlers.argon2._NoBackend):
    _abc_cache: Any = ...
    _abc_negative_cache: Any = ...
    _abc_negative_cache_version: Any = ...
    _abc_registry: Any = ...
    _backend_mixin_map: Any = ...
    _backend_mixin_target: Any = ...
    backends: Any = ...
    __abstractmethods__: Any = ...

class bcrypt(passlib.handlers.bcrypt._BcryptBackend):
    _BackendMixin__backend: Any = ...
    _abc_cache: Any = ...
    _abc_negative_cache: Any = ...
    _abc_negative_cache_version: Any = ...
    _abc_registry: Any = ...
    _backend_mixin_map: Any = ...
    _backend_mixin_target: Any = ...
    _pending_backend: Any = ...
    _pending_dry_run: Any = ...
    backends: Any = ...
    __abstractmethods__: Any = ...

class bsdi_crypt(passlib.utils.handlers.HasManyBackends, passlib.utils.handlers.HasRounds, passlib.utils.handlers.HasSalt):
    _abc_cache: Any = ...
    _abc_negative_cache: Any = ...
    _abc_negative_cache_version: Any = ...
    _abc_registry: Any = ...
    _avoid_even_rounds: Any = ...
    _calc_checksum_builtin: Any = ...
    _calc_checksum_os_crypt: Any = ...
    _calc_needs_update: Any = ...
    _hash_regex: Any = ...
    _pending_backend: Any = ...
    _pending_dry_run: Any = ...
    backends: Any = ...
    checksum_chars: Any = ...
    checksum_size: Any = ...
    default_rounds: Any = ...
    max_rounds: Any = ...
    max_salt_size: Any = ...
    min_rounds: Any = ...
    min_salt_size: Any = ...
    name: Any = ...
    rounds_cost: Any = ...
    salt_chars: Any = ...
    setting_kwds: Any = ...
    to_string: Any = ...
    __abstractmethods__: Any = ...
    @classmethod
    def _generate_rounds(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def _load_backend_builtin(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def _load_backend_os_crypt(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def from_string(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def using(cls, *args: Any, **kwargs: Any) -> Any: ...

class des_crypt(passlib.utils.handlers.TruncateMixin, passlib.utils.handlers.HasManyBackends, passlib.utils.handlers.HasSalt):
    _abc_cache: Any = ...
    _abc_negative_cache: Any = ...
    _abc_negative_cache_version: Any = ...
    _abc_registry: Any = ...
    _calc_checksum: Any = ...
    _calc_checksum_builtin: Any = ...
    _calc_checksum_os_crypt: Any = ...
    _hash_regex: Any = ...
    _pending_backend: Any = ...
    _pending_dry_run: Any = ...
    backends: Any = ...
    checksum_chars: Any = ...
    checksum_size: Any = ...
    max_salt_size: Any = ...
    min_salt_size: Any = ...
    name: Any = ...
    salt_chars: Any = ...
    setting_kwds: Any = ...
    to_string: Any = ...
    truncate_size: Any = ...
    __abstractmethods__: Any = ...
    @classmethod
    def _load_backend_builtin(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def _load_backend_os_crypt(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def from_string(cls, *args: Any, **kwargs: Any) -> Any: ...

class htdigest(passlib.utils.handlers.MinimalHandler):
    _abc_cache: Any = ...
    _abc_negative_cache: Any = ...
    _abc_negative_cache_version: Any = ...
    _abc_registry: Any = ...
    context_kwds: Any = ...
    default_encoding: Any = ...
    name: Any = ...
    setting_kwds: Any = ...
    __abstractmethods__: Any = ...
    @classmethod
    def _norm_hash(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def genconfig(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def genhash(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def hash(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def identify(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def verify(cls, *args: Any, **kwargs: Any) -> Any: ...

class ldap_sha1(passlib.handlers.ldap_digests._Base64DigestHelper):
    _abc_cache: Any = ...
    _abc_negative_cache: Any = ...
    _abc_negative_cache_version: Any = ...
    _abc_registry: Any = ...
    _hash_regex: Any = ...
    ident: Any = ...
    name: Any = ...
    __abstractmethods__: Any = ...
    @classmethod
    def _hash_func(cls, *args: Any, **kwargs: Any) -> Any: ...

class md5_crypt(passlib.utils.handlers.HasManyBackends, passlib.handlers.md5_crypt._MD5_Common):
    _abc_cache: Any = ...
    _abc_negative_cache: Any = ...
    _abc_negative_cache_version: Any = ...
    _abc_registry: Any = ...
    _calc_checksum_builtin: Any = ...
    _calc_checksum_os_crypt: Any = ...
    _pending_backend: Any = ...
    _pending_dry_run: Any = ...
    backends: Any = ...
    ident: Any = ...
    name: Any = ...
    __abstractmethods__: Any = ...
    @classmethod
    def _load_backend_builtin(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def _load_backend_os_crypt(cls, *args: Any, **kwargs: Any) -> Any: ...

class pbkdf2_sha1(passlib.handlers.pbkdf2.Pbkdf2DigestHandler):
    _abc_cache: Any = ...
    _abc_negative_cache: Any = ...
    _abc_negative_cache_version: Any = ...
    _abc_registry: Any = ...
    _digest: Any = ...
    checksum_size: Any = ...
    default_rounds: Any = ...
    encoded_checksum_size: Any = ...
    ident: Any = ...
    name: Any = ...
    __abstractmethods__: Any = ...

class pbkdf2_sha256(passlib.handlers.pbkdf2.Pbkdf2DigestHandler):
    _abc_cache: Any = ...
    _abc_negative_cache: Any = ...
    _abc_negative_cache_version: Any = ...
    _abc_registry: Any = ...
    _digest: Any = ...
    checksum_size: Any = ...
    default_rounds: Any = ...
    encoded_checksum_size: Any = ...
    ident: Any = ...
    name: Any = ...
    __abstractmethods__: Any = ...

class plaintext(passlib.utils.handlers.MinimalHandler):
    _abc_cache: Any = ...
    _abc_negative_cache: Any = ...
    _abc_negative_cache_version: Any = ...
    _abc_registry: Any = ...
    context_kwds: Any = ...
    default_encoding: Any = ...
    name: Any = ...
    setting_kwds: Any = ...
    __abstractmethods__: Any = ...
    @classmethod
    def genconfig(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def genhash(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def hash(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def identify(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def verify(cls, *args: Any, **kwargs: Any) -> Any: ...

class sha1_crypt(passlib.utils.handlers.HasManyBackends, passlib.utils.handlers.HasRounds, passlib.utils.handlers.HasSalt):
    _abc_cache: Any = ...
    _abc_negative_cache: Any = ...
    _abc_negative_cache_version: Any = ...
    _abc_registry: Any = ...
    _calc_checksum_builtin: Any = ...
    _calc_checksum_os_crypt: Any = ...
    _chk_offsets: Any = ...
    _pending_backend: Any = ...
    _pending_dry_run: Any = ...
    backends: Any = ...
    checksum_chars: Any = ...
    checksum_size: Any = ...
    default_rounds: Any = ...
    default_salt_size: Any = ...
    ident: Any = ...
    max_rounds: Any = ...
    max_salt_size: Any = ...
    min_rounds: Any = ...
    name: Any = ...
    rounds_cost: Any = ...
    salt_chars: Any = ...
    setting_kwds: Any = ...
    to_string: Any = ...
    __abstractmethods__: Any = ...
    @classmethod
    def _load_backend_builtin(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def _load_backend_os_crypt(cls, *args: Any, **kwargs: Any) -> Any: ...
    @classmethod
    def from_string(cls, *args: Any, **kwargs: Any) -> Any: ...

class sha256_crypt(passlib.handlers.sha2_crypt._SHA2_Common):
    _abc_cache: Any = ...
    _abc_negative_cache: Any = ...
    _abc_negative_cache_version: Any = ...
    _abc_registry: Any = ...
    _pending_backend: Any = ...
    _pending_dry_run: Any = ...
    _test_hash: Any = ...
    checksum_size: Any = ...
    default_rounds: Any = ...
    ident: Any = ...
    name: Any = ...
    __abstractmethods__: Any = ...

class sha512_crypt(passlib.handlers.sha2_crypt._SHA2_Common):
    _abc_cache: Any = ...
    _abc_negative_cache: Any = ...
    _abc_negative_cache_version: Any = ...
    _abc_registry: Any = ...
    _cdb_use_512: Any = ...
    _pending_backend: Any = ...
    _pending_dry_run: Any = ...
    _test_hash: Any = ...
    checksum_size: Any = ...
    default_rounds: Any = ...
    ident: Any = ...
    name: Any = ...
    __abstractmethods__: Any = ...
