# Stubs for passlib.tests.test_utils_handlers (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import passlib.utils.handlers as uh
from passlib.tests.utils import HandlerCase, TestCase
from typing import Any

log: Any

class SkeletonTest(TestCase):
    flag: Any = ...
    def test_00_static_handler(self): ...
    def test_01_calc_checksum_hack(self): ...
    def test_10_identify(self): ...
    def test_11_norm_checksum(self): ...
    def test_12_norm_checksum_raw(self): ...
    def test_20_norm_salt(self): ...
    def test_30_init_rounds(self): ...
    def test_40_backends(self): ...
    def test_41_backends(self): ...
    def test_50_norm_ident(self): ...
    def test_91_parsehash(self) -> None: ...
    def test_92_bitsize(self) -> None: ...

class dummy_handler_in_registry:
    name: Any = ...
    dummy: Any = ...
    def __init__(self, name: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *exc_info: Any) -> None: ...

class PrefixWrapperTest(TestCase):
    def test_00_lazy_loading(self) -> None: ...
    def test_01_active_loading(self) -> None: ...
    def test_02_explicit(self) -> None: ...
    def test_10_wrapped_attributes(self) -> None: ...
    def test_11_wrapped_methods(self) -> None: ...
    def test_12_ident(self) -> None: ...
    def test_13_repr(self) -> None: ...
    def test_14_bad_hash(self) -> None: ...

class UnsaltedHash(uh.StaticHandler):
    name: str = ...
    checksum_chars: Any = ...
    checksum_size: int = ...

class SaltedHash(uh.HasSalt, uh.GenericHandler):
    name: str = ...
    setting_kwds: Any = ...
    min_salt_size: int = ...
    max_salt_size: int = ...
    checksum_size: int = ...
    salt_chars: Any = ...
    checksum_chars: Any = ...
    @classmethod
    def from_string(cls, hash: Any): ...
    def to_string(self): ...

UPASS_TEMP: Any

class UnsaltedHashTest(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    def test_bad_kwds(self) -> None: ...

class SaltedHashTest(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    def test_bad_kwds(self) -> None: ...
