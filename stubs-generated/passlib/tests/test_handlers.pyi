# Stubs for passlib.tests.test_handlers (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from passlib.tests.utils import EncodingHandlerMixin, HandlerCase, TestCase, UserHandlerMixin
from typing import Any

log: Any
UPASS_WAV: Any
UPASS_USD: Any
UPASS_TABLE: Any
PASS_TABLE_UTF8: bytes

def get_handler_case(scheme: Any): ...

conditionally_available_hashes: Any

class apr_md5_crypt_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_malformed_hashes: Any = ...

class bigcrypt_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...
    known_other_hashes: Any = ...
    def test_90_internal(self) -> None: ...

class _bsdi_crypt_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...
    platform_crypt_support: Any = ...
    def test_77_fuzz_input(self, **kwds: Any) -> None: ...
    def test_needs_update_w_even_rounds(self) -> None: ...

bsdi_crypt_os_crypt_test: Any
bsdi_crypt_builtin_test: Any

class crypt16_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...

class _des_crypt_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...
    platform_crypt_support: Any = ...

des_crypt_os_crypt_test: Any
des_crypt_builtin_test: Any

class fshp_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...
    known_malformed_hashes: Any = ...
    def test_90_variant(self) -> None: ...

class hex_md4_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...

class hex_md5_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...

class hex_sha1_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...

class hex_sha256_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...

class hex_sha512_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...

class htdigest_test(UserHandlerMixin, HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...
    def test_80_user(self) -> None: ...
    def populate_context(self, secret: Any, kwds: Any): ...

class ldap_md5_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...

class ldap_sha1_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...

class ldap_salted_md5_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_malformed_hashes: Any = ...

class ldap_salted_sha1_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_malformed_hashes: Any = ...

class ldap_plaintext_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...
    known_other_hashes: Any = ...
    class FuzzHashGenerator(HandlerCase.FuzzHashGenerator):
        def random_password(self): ...

class _ldap_md5_crypt_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_malformed_hashes: Any = ...

ldap_md5_crypt_os_crypt_test: Any
ldap_md5_crypt_builtin_test: Any

class _ldap_sha1_crypt_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    def populate_settings(self, kwds: Any) -> None: ...
    def test_77_fuzz_input(self) -> None: ...

ldap_sha1_crypt_os_crypt_test: Any

class lmhash_test(EncodingHandlerMixin, HandlerCase):
    handler: Any = ...
    secret_case_insensitive: bool = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...
    def test_90_raw(self) -> None: ...

class _md5_crypt_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_malformed_hashes: Any = ...
    platform_crypt_support: Any = ...

md5_crypt_os_crypt_test: Any
md5_crypt_builtin_test: Any

class msdcc_test(UserHandlerMixin, HandlerCase):
    handler: Any = ...
    user_case_insensitive: bool = ...
    known_correct_hashes: Any = ...
    known_alternate_hashes: Any = ...

class msdcc2_test(UserHandlerMixin, HandlerCase):
    handler: Any = ...
    user_case_insensitive: bool = ...
    known_correct_hashes: Any = ...

class mssql2000_test(HandlerCase):
    handler: Any = ...
    secret_case_insensitive: str = ...
    known_correct_hashes: Any = ...
    known_alternate_hashes: Any = ...
    known_unidentified_hashes: Any = ...
    known_malformed_hashes: Any = ...

class mssql2005_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_alternate_hashes: Any = ...
    known_unidentified_hashes: Any = ...
    known_malformed_hashes: Any = ...

class mysql323_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...
    def test_90_whitespace(self) -> None: ...
    class FuzzHashGenerator(HandlerCase.FuzzHashGenerator):
        def accept_password_pair(self, secret: Any, other: Any): ...

class mysql41_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...

class nthash_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...

class bsd_nthash_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...

class oracle10_test(UserHandlerMixin, HandlerCase):
    handler: Any = ...
    secret_case_insensitive: bool = ...
    user_case_insensitive: bool = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...

class oracle11_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...

class phpass_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_malformed_hashes: Any = ...

class plaintext_test(HandlerCase):
    handler: Any = ...
    accepts_all_hashes: bool = ...
    known_correct_hashes: Any = ...

class postgres_md5_test(UserHandlerMixin, HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...

class _sha1_crypt_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_malformed_hashes: Any = ...
    platform_crypt_support: Any = ...

sha1_crypt_os_crypt_test: Any
sha1_crypt_builtin_test: Any

class RoundupTest(TestCase):
    def test_pairs(self) -> None: ...

class _sha256_crypt_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_malformed_hashes: Any = ...
    known_correct_configs: Any = ...
    filter_config_warnings: bool = ...
    platform_crypt_support: Any = ...

sha256_crypt_os_crypt_test: Any
sha256_crypt_builtin_test: Any

class _sha512_crypt_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_malformed_hashes: Any = ...
    known_correct_configs: Any = ...
    filter_config_warnings: bool = ...
    platform_crypt_support: Any = ...

sha512_crypt_os_crypt_test: Any
sha512_crypt_builtin_test: Any

class sun_md5_crypt_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_correct_configs: Any = ...
    known_malformed_hashes: Any = ...
    platform_crypt_support: Any = ...
    def do_verify(self, secret: Any, hash: Any): ...

class unix_disabled_test(HandlerCase):
    handler: Any = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...
    accepts_all_hashes: bool = ...
    def test_76_hash_border(self) -> None: ...
    def test_90_special(self) -> None: ...

class unix_fallback_test(HandlerCase):
    handler: Any = ...
    accepts_all_hashes: bool = ...
    known_correct_hashes: Any = ...
    def setUp(self) -> None: ...
    def test_90_wildcard(self) -> None: ...
    def test_91_preserves_existing(self) -> None: ...
