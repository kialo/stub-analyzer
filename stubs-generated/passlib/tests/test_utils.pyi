# Stubs for passlib.tests.test_utils (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from passlib.tests.utils import TestCase
from typing import Any

class MiscTest(TestCase):
    def test_compat(self) -> None: ...
    def test_classproperty(self): ...
    def test_deprecated_function(self): ...
    counter: Any = ...
    def test_memoized_property(self): ...
    def test_getrandbytes(self) -> None: ...
    def test_getrandstr(self, seed: Any) -> None: ...
    def test_generate_password(self) -> None: ...
    def test_is_crypt_context(self) -> None: ...
    def test_genseed(self) -> None: ...
    def test_crypt(self): ...
    def test_consteq(self): ...
    def test_saslprep(self) -> None: ...
    def test_splitcomma(self) -> None: ...

class CodecTest(TestCase):
    def test_bytes(self) -> None: ...
    def test_to_bytes(self) -> None: ...
    def test_to_unicode(self) -> None: ...
    def test_to_native_str(self) -> None: ...
    def test_is_ascii_safe(self) -> None: ...
    def test_is_same_codec(self) -> None: ...

class Base64EngineTest(TestCase):
    def test_constructor(self) -> None: ...
    def test_ab64_decode(self) -> None: ...
    def test_ab64_encode(self) -> None: ...
    def test_b64s_decode(self) -> None: ...
    def test_b64s_encode(self) -> None: ...

class _Base64Test(TestCase):
    engine: Any = ...
    encoded_data: Any = ...
    encoded_ints: Any = ...
    bad_byte: bytes = ...
    def m(self, *offsets: Any): ...
    def test_encode_bytes(self) -> None: ...
    def test_encode_bytes_bad(self) -> None: ...
    def test_decode_bytes(self) -> None: ...
    def test_decode_bytes_padding(self): ...
    def test_decode_bytes_bad(self) -> None: ...
    def test_codec(self) -> None: ...
    def test_repair_unused(self) -> None: ...
    transposed: Any = ...
    transposed_dups: Any = ...
    def test_encode_transposed_bytes(self) -> None: ...
    def test_decode_transposed_bytes(self) -> None: ...
    def test_decode_transposed_bytes_bad(self) -> None: ...
    def check_int_pair(self, bits: Any, encoded_pairs: Any) -> None: ...
    def test_int6(self) -> None: ...
    def test_int12(self) -> None: ...
    def test_int24(self) -> None: ...
    def test_int64(self) -> None: ...
    def test_encoded_ints(self) -> None: ...

class H64_Test(_Base64Test):
    engine: Any = ...
    descriptionPrefix: str = ...
    encoded_data: Any = ...
    encoded_ints: Any = ...

class H64Big_Test(_Base64Test):
    engine: Any = ...
    descriptionPrefix: str = ...
    encoded_data: Any = ...
    encoded_ints: Any = ...
