# Stubs for passlib.tests.test_handlers_django (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from passlib.tests.test_handlers_argon2 import _base_argon2_test
from passlib.tests.utils import HandlerCase, TestCase
from typing import Any, Optional

log: Any
UPASS_LETMEIN: Any

def vstr(version: Any): ...

class _DjangoHelper(TestCase):
    min_django_version: Any = ...
    max_django_version: Any = ...
    extra_fuzz_verifiers: Any = ...
    def fuzz_verifier_django(self): ...
    def test_90_django_reference(self) -> None: ...
    django_has_encoding_glitch: bool = ...
    def test_91_django_generation(self) -> None: ...

class django_disabled_test(HandlerCase):
    handler: Any = ...
    disabled_contains_salt: bool = ...
    known_correct_hashes: Any = ...
    known_alternate_hashes: Any = ...

class django_des_crypt_test(HandlerCase, _DjangoHelper):
    handler: Any = ...
    max_django_version: Any = ...
    known_correct_hashes: Any = ...
    known_alternate_hashes: Any = ...
    known_unidentified_hashes: Any = ...
    known_malformed_hashes: Any = ...

class django_salted_md5_test(HandlerCase, _DjangoHelper):
    handler: Any = ...
    max_django_version: Any = ...
    django_has_encoding_glitch: bool = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...
    known_malformed_hashes: Any = ...
    class FuzzHashGenerator(HandlerCase.FuzzHashGenerator):
        def random_salt_size(self): ...

class django_salted_sha1_test(HandlerCase, _DjangoHelper):
    handler: Any = ...
    max_django_version: Any = ...
    django_has_encoding_glitch: bool = ...
    known_correct_hashes: Any = ...
    known_unidentified_hashes: Any = ...
    known_malformed_hashes: Any = ...
    FuzzHashGenerator: Any = ...

class django_pbkdf2_sha256_test(HandlerCase, _DjangoHelper):
    handler: Any = ...
    known_correct_hashes: Any = ...

class django_pbkdf2_sha1_test(HandlerCase, _DjangoHelper):
    handler: Any = ...
    known_correct_hashes: Any = ...

class django_bcrypt_test(HandlerCase, _DjangoHelper):
    handler: Any = ...
    fuzz_salts_need_bcrypt_repair: bool = ...
    known_correct_hashes: Any = ...
    def populate_settings(self, kwds: Any) -> None: ...
    class FuzzHashGenerator(HandlerCase.FuzzHashGenerator):
        def random_rounds(self): ...
        def random_ident(self) -> None: ...

class django_bcrypt_sha256_test(HandlerCase, _DjangoHelper):
    handler: Any = ...
    forbidden_characters: Any = ...
    fuzz_salts_need_bcrypt_repair: bool = ...
    known_correct_hashes: Any = ...
    known_malformed_hashers: Any = ...
    def populate_settings(self, kwds: Any) -> None: ...
    class FuzzHashGenerator(HandlerCase.FuzzHashGenerator):
        def random_rounds(self): ...
        def random_ident(self) -> None: ...

class django_argon2_test(HandlerCase, _DjangoHelper):
    handler: Any = ...
    known_correct_hashes: Any = ...
    def setUpWarnings(self) -> None: ...
    checksum: Any = ...
    def do_stub_encrypt(self, handler: Optional[Any] = ..., **settings: Any): ...
    def test_03_legacy_hash_workflow(self) -> None: ...
    class FuzzHashGenerator(_base_argon2_test.FuzzHashGenerator):
        def random_rounds(self): ...
