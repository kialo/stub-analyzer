# Stubs for passlib.tests.utils (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import warnings
from passlib.tests.backports import TestCase as _TestCase
from typing import Any, Optional

def TEST_MODE(min: Optional[Any] = ..., max: Optional[Any] = ...): ...
def set_file(path: Any, content: Any) -> None: ...
def get_file(path: Any): ...

class TestCase(_TestCase):
    descriptionPrefix: Any = ...
    def shortDescription(self): ...
    def __unittest_skip__(cls): ...
    def __test__(cls): ...
    resetWarningState: bool = ...
    def setUp(self) -> None: ...
    def setUpWarnings(self) -> None: ...
    longMessage: bool = ...
    def assertRaises(self, _exc_type: Any, _callable: Optional[Any] = ..., *args: Any, **kwds: Any): ...
    def assertEquals(self, *a: Any, **k: Any) -> None: ...
    assertNotEquals: Any = ...
    assertRegexMatches: Any = ...
    def assertWarning(self, warning: Any, message_re: Optional[Any] = ..., message: Optional[Any] = ..., category: Optional[Any] = ..., filename_re: Optional[Any] = ..., filename: Optional[Any] = ..., lineno: Optional[Any] = ..., msg: Optional[Any] = ...) -> None: ...
    class _AssertWarningList(warnings.catch_warnings):
        case: Any = ...
        kwds: Any = ...
        def __init__(self, case: Any, **kwds: Any) -> None: ...
        log: Any = ...
        def __enter__(self) -> None: ...
        def __exit__(self, *exc_info: Any) -> None: ...
    def assertWarningList(self, wlist: Optional[Any] = ..., desc: Optional[Any] = ..., msg: Optional[Any] = ...): ...
    def consumeWarningList(self, wlist: Any, desc: Optional[Any] = ..., *args: Any, **kwds: Any) -> None: ...
    def require_stringprep(self) -> None: ...
    def require_TEST_MODE(self, level: Any) -> None: ...
    def require_writeable_filesystem(self): ...
    def getRandom(self, name: str = ..., seed: Optional[Any] = ...): ...
    def mktemp(self, *args: Any, **kwds: Any): ...
    def patchAttr(self, obj: Any, attr: Any, value: Any, require_existing: bool = ..., wrap: bool = ...) -> None: ...

class HandlerCase(TestCase):
    handler: Any = ...
    backend: Any = ...
    known_correct_hashes: Any = ...
    known_correct_configs: Any = ...
    known_alternate_hashes: Any = ...
    known_unidentified_hashes: Any = ...
    known_malformed_hashes: Any = ...
    known_other_hashes: Any = ...
    stock_passwords: Any = ...
    secret_case_insensitive: bool = ...
    accepts_all_hashes: bool = ...
    disabled_contains_salt: bool = ...
    filter_config_warnings: bool = ...
    def forbidden_characters(cls): ...
    @property
    def descriptionPrefix(self): ...
    @classmethod
    def iter_known_hashes(cls) -> None: ...
    def get_sample_hash(self): ...
    def check_verify(self, secret: Any, hash: Any, msg: Optional[Any] = ..., negate: bool = ...) -> None: ...
    def check_returned_native_str(self, result: Any, func_name: Any) -> None: ...
    def populate_settings(self, kwds: Any) -> None: ...
    def populate_context(self, secret: Any, kwds: Any): ...
    def do_encrypt(self, secret: Any, use_encrypt: bool = ..., handler: Optional[Any] = ..., context: Optional[Any] = ..., **settings: Any): ...
    def do_verify(self, secret: Any, hash: Any, handler: Optional[Any] = ..., **kwds: Any): ...
    def do_identify(self, hash: Any): ...
    def do_genconfig(self, **kwds: Any): ...
    def do_genhash(self, secret: Any, config: Any, **kwds: Any): ...
    def do_stub_encrypt(self, handler: Optional[Any] = ..., context: Optional[Any] = ..., **settings: Any): ...
    BACKEND_NOT_AVAILABLE: str = ...
    @classmethod
    def create_backend_case(cls, backend: Any): ...
    def setUp(self) -> None: ...
    def test_01_required_attributes(self): ...
    def test_02_config_workflow(self) -> None: ...
    def test_02_using_workflow(self) -> None: ...
    def test_03_hash_workflow(self, use_16_legacy: bool = ...) -> None: ...
    def test_03_legacy_hash_workflow(self) -> None: ...
    def test_04_hash_types(self) -> None: ...
    def test_05_backends(self) -> None: ...
    def require_salt(self) -> None: ...
    def require_salt_info(self) -> None: ...
    def test_10_optional_salt_attributes(self) -> None: ...
    @property
    def salt_bits(self): ...
    def test_11_unique_salt(self): ...
    def test_12_min_salt_size(self) -> None: ...
    def test_13_max_salt_size(self) -> None: ...
    fuzz_salts_need_bcrypt_repair: bool = ...
    def prepare_salt(self, salt: Any): ...
    def test_14_salt_chars(self) -> None: ...
    @property
    def salt_type(self): ...
    def test_15_salt_type(self) -> None: ...
    def test_using_salt_size(self) -> None: ...
    def require_rounds_info(self) -> None: ...
    def test_20_optional_rounds_attributes(self) -> None: ...
    def test_21_min_rounds(self) -> None: ...
    def test_21b_max_rounds(self) -> None: ...
    def test_has_rounds_using_harness(self) -> None: ...
    def test_has_rounds_using_w_min_rounds(self) -> None: ...
    def test_has_rounds_replace_w_max_rounds(self) -> None: ...
    def test_has_rounds_using_w_default_rounds(self) -> None: ...
    def test_has_rounds_using_w_rounds(self) -> None: ...
    def test_has_rounds_using_w_vary_rounds_parsing(self): ...
    def test_has_rounds_using_w_vary_rounds_generation(self): ...
    def test_has_rounds_using_and_needs_update(self) -> None: ...
    def require_many_idents(self) -> None: ...
    def test_30_HasManyIdents(self) -> None: ...
    def test_has_many_idents_using(self): ...
    def test_truncate_error_setting(self): ...
    def test_secret_wo_truncate_size(self) -> None: ...
    def test_secret_w_truncate_size(self) -> None: ...
    def test_61_secret_case_sensitive(self) -> None: ...
    def test_62_secret_border(self) -> None: ...
    def test_63_large_secret(self) -> None: ...
    def test_64_forbidden_chars(self) -> None: ...
    def is_secret_8bit(self, secret: Any): ...
    def expect_os_crypt_failure(self, secret: Any): ...
    def test_70_hashes(self) -> None: ...
    def test_71_alternates(self) -> None: ...
    def test_72_configs(self) -> None: ...
    def test_73_unidentified(self) -> None: ...
    def test_74_malformed(self) -> None: ...
    def test_75_foreign(self) -> None: ...
    def test_76_hash_border(self) -> None: ...
    def test_77_fuzz_input(self, threaded: bool = ...): ...
    def test_78_fuzz_threading(self): ...
    @property
    def max_fuzz_time(self): ...
    @property
    def fuzz_thread_count(self): ...
    fuzz_verifiers: Any = ...
    def get_fuzz_verifiers(self, threaded: bool = ...): ...
    def fuzz_verifier_default(self): ...
    class FuzzHashGenerator:
        password_alphabet: Any = ...
        password_encoding: str = ...
        settings_map: Any = ...
        context_map: Any = ...
        test: Any = ...
        handler: Any = ...
        rng: Any = ...
        def __init__(self, test: Any, rng: Any) -> None: ...
        def generate(self): ...
        def randintgauss(self, lower: Any, upper: Any, mu: Any, sigma: Any): ...
        def random_rounds(self): ...
        def random_salt_size(self): ...
        def random_ident(self): ...
        def random_password_pair(self): ...
        def random_password(self): ...
        def accept_password_pair(self, secret: Any, other: Any): ...
    def test_disable_and_enable(self) -> None: ...

class OsCryptMixin(HandlerCase):
    platform_crypt_support: Any = ...
    has_os_crypt_fallback: bool = ...
    alt_safe_crypt_handler: Any = ...
    backend: str = ...
    using_patched_crypt: bool = ...
    def setUp(self) -> None: ...
    def test_80_faulty_crypt(self) -> None: ...
    def test_81_crypt_fallback(self) -> None: ...
    def test_82_crypt_support(self) -> None: ...
    def fuzz_verifier_crypt(self): ...
    def crypt_supports_variant(self, hash: Any): ...

class UserHandlerMixin(HandlerCase):
    default_user: str = ...
    requires_user: bool = ...
    user_case_insensitive: bool = ...
    def test_80_user(self) -> None: ...
    def test_81_user_case(self) -> None: ...
    def test_82_user_salt(self) -> None: ...
    def populate_context(self, secret: Any, kwds: Any): ...
    class FuzzHashGenerator(HandlerCase.FuzzHashGenerator):
        context_map: Any = ...
        user_alphabet: Any = ...
        def random_user(self): ...

class EncodingHandlerMixin(HandlerCase):
    stock_passwords: Any = ...
    class FuzzHashGenerator(HandlerCase.FuzzHashGenerator):
        password_alphabet: Any = ...
    def populate_context(self, secret: Any, kwds: Any): ...

class reset_warnings(warnings.catch_warnings):
    def __init__(self, reset_filter: str = ..., reset_registry: str = ..., **kwds: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *exc_info: Any) -> None: ...
