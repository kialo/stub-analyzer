# Stubs for passlib.handlers.pbkdf2 (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

from passlib.utils import handlers as uh

class Pbkdf2DigestHandler(uh.HasRounds, uh.HasRawSalt, uh.HasRawChecksum, uh.GenericHandler):
    setting_kwds = ...  # type: Any
    checksum_chars = ...  # type: Any
    max_salt_size = ...  # type: int
    default_rounds = ...  # type: Any
    min_rounds = ...  # type: int
    max_rounds = ...  # type: int
    rounds_cost = ...  # type: str
    def to_string(self) -> Any: ...

pbkdf2_sha1 = ...  # type: Any
pbkdf2_sha256 = ...  # type: Any
pbkdf2_sha512 = ...  # type: Any

class cta_pbkdf2_sha1(uh.HasRounds, uh.HasRawSalt, uh.HasRawChecksum, uh.GenericHandler):
    name = ...  # type: str
    setting_kwds = ...  # type: Any
    ident = ...  # type: Any
    checksum_size = ...  # type: int
    max_salt_size = ...  # type: int
    default_rounds = ...  # type: Any
    min_rounds = ...  # type: int
    max_rounds = ...  # type: int
    rounds_cost = ...  # type: str
    def to_string(self) -> Any: ...

class dlitz_pbkdf2_sha1(uh.HasRounds, uh.HasSalt, uh.GenericHandler):
    name = ...  # type: str
    setting_kwds = ...  # type: Any
    ident = ...  # type: Any
    max_salt_size = ...  # type: int
    salt_chars = ...  # type: Any
    default_rounds = ...  # type: Any
    min_rounds = ...  # type: int
    max_rounds = ...  # type: int
    rounds_cost = ...  # type: str
    def to_string(self) -> Any: ...

class atlassian_pbkdf2_sha1(uh.HasRawSalt, uh.HasRawChecksum, uh.GenericHandler):
    name = ...  # type: str
    setting_kwds = ...  # type: Any
    ident = ...  # type: Any
    checksum_size = ...  # type: int
    min_salt_size = ...  # type: int
    max_salt_size = ...  # type: int
    def to_string(self) -> Any: ...

class grub_pbkdf2_sha512(uh.HasRounds, uh.HasRawSalt, uh.HasRawChecksum, uh.GenericHandler):
    name = ...  # type: str
    setting_kwds = ...  # type: Any
    ident = ...  # type: Any
    checksum_size = ...  # type: int
    max_salt_size = ...  # type: int
    default_rounds = ...  # type: Any
    min_rounds = ...  # type: int
    max_rounds = ...  # type: int
    rounds_cost = ...  # type: str
    def to_string(self) -> Any: ...
