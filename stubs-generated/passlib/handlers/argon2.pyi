# Stubs for passlib.handlers.argon2 (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import passlib.utils.handlers as uh
from typing import Any, Optional

class _default_settings:
    time_cost: int = ...
    memory_cost: int = ...
    parallelism: int = ...
    salt_len: int = ...
    hash_len: int = ...

class _Argon2Common(uh.SubclassBackendMixin, uh.ParallelismMixin, uh.HasRounds, uh.HasRawSalt, uh.HasRawChecksum, uh.GenericHandler):
    name: str = ...
    setting_kwds: Any = ...
    ident: Any = ...
    checksum_size: Any = ...
    ident_values: Any = ...
    default_salt_size: Any = ...
    min_salt_size: int = ...
    max_salt_size: Any = ...
    default_rounds: Any = ...
    min_rounds: int = ...
    max_rounds: Any = ...
    rounds_cost: str = ...
    max_parallelism: Any = ...
    max_version: Any = ...
    min_desired_version: Any = ...
    min_memory_cost: int = ...
    max_threads: int = ...
    pure_use_threads: bool = ...
    parallelism: Any = ...
    version: Any = ...
    memory_cost: Any = ...
    type_d: bool = ...
    data: Any = ...
    @classmethod
    def using(cls, memory_cost: Optional[Any] = ..., salt_len: Optional[Any] = ..., time_cost: Optional[Any] = ..., digest_size: Optional[Any] = ..., checksum_size: Optional[Any] = ..., hash_len: Optional[Any] = ..., max_threads: Optional[Any] = ..., **kwds: Any): ...
    @classmethod
    def identify(cls, hash: Any): ...
    @classmethod
    def from_string(cls, hash: Any): ...
    def to_string(self): ...
    def __init__(self, type_d: bool = ..., version: Optional[Any] = ..., memory_cost: Optional[Any] = ..., data: Optional[Any] = ..., **kwds: Any) -> None: ...

class _NoBackend(_Argon2Common):
    @classmethod
    def hash(cls, secret: Any): ...
    @classmethod
    def verify(cls, secret: Any, hash: Any): ...
    @classmethod
    def genhash(cls, secret: Any, config: Any): ...

class _CffiBackend(_Argon2Common):
    @classmethod
    def hash(cls, secret: Any): ...
    @classmethod
    def verify(cls, secret: Any, hash: Any): ...
    @classmethod
    def genhash(cls, secret: Any, config: Any): ...

class _PureBackend(_Argon2Common): ...

class argon2(_NoBackend, _Argon2Common):
    backends: Any = ...
