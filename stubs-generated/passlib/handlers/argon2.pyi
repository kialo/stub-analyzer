# Stubs for passlib.handlers.argon2 (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

from passlib.utils import handlers as uh

class _default_settings:
    time_cost = ...  # type: int
    memory_cost = ...  # type: int
    parallelism = ...  # type: int
    salt_len = ...  # type: int
    hash_len = ...  # type: int

class _Argon2Common(uh.SubclassBackendMixin, uh.ParallelismMixin, uh.HasRounds, uh.HasRawSalt, uh.HasRawChecksum, uh.GenericHandler):
    name = ...  # type: str
    setting_kwds = ...  # type: Any
    ident = ...  # type: Any
    checksum_size = ...  # type: Any
    ident_values = ...  # type: Any
    default_salt_size = ...  # type: Any
    min_salt_size = ...  # type: int
    max_salt_size = ...  # type: Any
    default_rounds = ...  # type: Any
    min_rounds = ...  # type: int
    max_rounds = ...  # type: Any
    rounds_cost = ...  # type: str
    max_parallelism = ...  # type: Any
    max_version = ...  # type: Any
    min_desired_version = ...  # type: Any
    min_memory_cost = ...  # type: int
    max_threads = ...  # type: int
    pure_use_threads = ...  # type: bool
    parallelism = ...  # type: Any
    version = ...  # type: Any
    memory_cost = ...  # type: Any
    type_d = ...  # type: bool
    data = ...  # type: Any
    @classmethod
    def identify(cls, hash: Any) -> Any: ...
    def to_string(self) -> Any: ...
    def __init__(self, type_d: bool = ..., version: Optional[Any] = ..., memory_cost: Optional[Any] = ..., data: Optional[Any] = ..., **kwds: Any) -> None: ...

class _NoBackend(_Argon2Common): ...
class _CffiBackend(_Argon2Common): ...
class _PureBackend(_Argon2Common): ...

class argon2(_NoBackend, _Argon2Common):
    backends = ...  # type: Any
