# Stubs for passlib.utils (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from binascii import Error as _BinAsciiError
from codecs import lookup as _lookup_codec
from crypt import crypt as _crypt
from time import clock as timer
from time import time as timer
from typing import Any, Optional

sys_bits = ...  # type: Any
unix_crypt_schemes = ...  # type: Any
rounds_cost_values = ...  # type: Any

class SequenceMixin:
    def __getitem__(self, idx: Any) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

def consteq(left: Any, right: Any) -> Any: ...
def saslprep(source: Any, param: str = ...) -> Any: ...
def render_bytes(source: Any, *args: Any) -> Any: ...
def xor_bytes(left: Any, right: Any) -> Any: ...
def is_same_codec(left: Any, right: Any) -> Any: ...
def is_ascii_safe(source: Any) -> Any: ...
def to_bytes(source: Any, encoding: str = ..., param: str = ..., source_encoding: Optional[Any] = ...) -> Any: ...
def to_unicode(source: Any, encoding: str = ..., param: str = ...) -> Any: ...
def to_native_str(source: Any, encoding: str = ..., param: str = ...) -> Any: ...

has_crypt = ...  # type: bool

def safe_crypt(secret: Any, hash: Any) -> Any: ...
def test_crypt(secret: Any, hash: Any) -> Any: ...

tick = ...  # type: Any
rng = ...  # type: Any

def getrandbytes(rng: Any, count: Any) -> Any: ...
def getrandstr(rng: Any, charset: Any, count: Any) -> Any: ...
def generate_password(size: int = ..., charset: Any = ...) -> Any: ...
def is_crypt_handler(obj: Any) -> Any: ...
def is_crypt_context(obj: Any) -> Any: ...
def has_rounds_info(handler: Any) -> Any: ...
def has_salt_info(handler: Any) -> Any: ...
