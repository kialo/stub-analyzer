# Stubs for passlib.utils (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from hmac import compare_digest as consteq
from passlib.utils.compat import JYTHON as JYTHON
from time import time as timer
from typing import Any, Optional

sys_bits: Any
unix_crypt_schemes: Any
rounds_cost_values: Any

class SequenceMixin:
    def __getitem__(self, idx: Any): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...

def consteq(left: Any, right: Any): ...
str_consteq = consteq

def saslprep(source: Any, param: str = ...): ...
def render_bytes(source: Any, *args: Any): ...
def xor_bytes(left: Any, right: Any): ...
def is_same_codec(left: Any, right: Any): ...
def is_ascii_safe(source: Any): ...
def to_bytes(source: Any, encoding: str = ..., param: str = ..., source_encoding: Optional[Any] = ...): ...
def to_unicode(source: Any, encoding: str = ..., param: str = ...): ...
def to_native_str(source: Any, encoding: str = ..., param: str = ...): ...

has_crypt: bool

def safe_crypt(secret: Any, hash: Any) -> None: ...
def test_crypt(secret: Any, hash: Any): ...
tick = timer
rng: Any

def getrandbytes(rng: Any, count: Any): ...
def getrandstr(rng: Any, charset: Any, count: Any): ...
def generate_password(size: int = ..., charset: Any = ...): ...
def is_crypt_handler(obj: Any): ...
def is_crypt_context(obj: Any): ...
def has_rounds_info(handler: Any): ...
def has_salt_info(handler: Any): ...
