# Stubs for passlib.utils.handlers (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

from passlib.ifc import PasswordHash

def parse_mc2(hash: Any, prefix: Any, sep: Any = ..., handler: Optional[Any] = ...) -> Any: ...
def parse_mc3(hash: Any, prefix: Any, sep: Any = ..., rounds_base: int = ..., default_rounds: Optional[Any] = ..., handler: Optional[Any] = ...) -> Any: ...
def render_mc2(ident: Any, salt: Any, checksum: Any, sep: Any = ...) -> Any: ...
def render_mc3(ident: Any, rounds: Any, salt: Any, checksum: Any, sep: Any = ..., rounds_base: int = ...) -> Any: ...

class MinimalHandler(PasswordHash):
    @classmethod
    def using(cls, relaxed: bool = ..., **kwds: Any) -> Any: ...

class TruncateMixin(MinimalHandler):
    truncate_error = ...  # type: bool
    truncate_verify_reject = ...  # type: bool
    @classmethod
    def using(cls, relaxed: bool = ..., **kwds: Any) -> Any: ...

class GenericHandler(MinimalHandler):
    setting_kwds = ...  # type: Any
    context_kwds = ...  # type: Any
    ident = ...  # type: Any
    checksum_size = ...  # type: Any
    checksum_chars = ...  # type: Any
    checksum = ...  # type: Any
    use_defaults = ...  # type: Any
    def __init__(self, checksum: Optional[Any] = ..., use_defaults: bool = ..., **kwds: Any) -> None: ...
    @classmethod
    def identify(cls, hash: Any) -> Any: ...
    @classmethod
    def from_string(cls, hash: Any, **context: Any) -> Any: ...
    def to_string(self) -> Any: ...
    @classmethod
    def hash(cls, secret: Any, **kwds: Any) -> Any: ...
    @classmethod
    def verify(cls, secret: Any, hash: Any, **context: Any) -> Any: ...
    @classmethod
    def genconfig(cls, **kwds: Any) -> Any: ...
    @classmethod
    def genhash(cls, secret: Any, config: Any, **context: Any) -> Any: ...
    @classmethod
    def needs_update(cls, hash: Any, secret: Optional[Any] = ..., **kwds: Any) -> Any: ...
    @classmethod
    def parsehash(cls, hash: Any, checksum: bool = ..., sanitize: bool = ...) -> Any: ...
    @classmethod
    def bitsize(cls, **kwds: Any) -> Any: ...

class StaticHandler(GenericHandler):
    setting_kwds = ...  # type: Any
    @classmethod
    def from_string(cls, hash: Any, **context: Any) -> Any: ...
    def to_string(self) -> Any: ...

class HasEncodingContext(GenericHandler):
    context_kwds = ...  # type: Any
    default_encoding = ...  # type: str
    encoding = ...  # type: Any
    def __init__(self, encoding: Optional[Any] = ..., **kwds: Any) -> None: ...

class HasUserContext(GenericHandler):
    context_kwds = ...  # type: Any
    user = ...  # type: Any
    def __init__(self, user: Optional[Any] = ..., **kwds: Any) -> None: ...
    @classmethod
    def hash(cls, secret: Any, user: Optional[Any] = ..., **context: Any) -> Any: ...
    @classmethod
    def verify(cls, secret: Any, hash: Any, user: Optional[Any] = ..., **context: Any) -> Any: ...
    @classmethod
    def genhash(cls, secret: Any, config: Any, user: Optional[Any] = ..., **context: Any) -> Any: ...

class HasRawChecksum(GenericHandler): ...

class HasManyIdents(GenericHandler):
    default_ident = ...  # type: Any
    ident_values = ...  # type: Any
    ident_aliases = ...  # type: Any
    ident = ...  # type: Any
    def __init__(self, ident: Optional[Any] = ..., **kwds: Any) -> None: ...
    @classmethod
    def identify(cls, hash: Any) -> Any: ...

class HasSalt(GenericHandler):
    min_salt_size = ...  # type: int
    max_salt_size = ...  # type: Any
    salt_chars = ...  # type: Any
    @classmethod
    def default_salt_size(cls) -> Any: ...
    @classmethod
    def default_salt_chars(cls) -> Any: ...
    salt = ...  # type: Any
    def __init__(self, salt: Optional[Any] = ..., **kwds: Any) -> None: ...
    @classmethod
    def bitsize(cls, *args: Any, **kwds: Any) -> Any: ...

class HasRawSalt(HasSalt):
    salt_chars = ...  # type: Any

class HasRounds(GenericHandler):
    min_rounds = ...  # type: int
    max_rounds = ...  # type: Any
    rounds_cost = ...  # type: str
    using_rounds_kwds = ...  # type: Any
    min_desired_rounds = ...  # type: Any
    max_desired_rounds = ...  # type: Any
    default_rounds = ...  # type: Any
    vary_rounds = ...  # type: Any
    rounds = ...  # type: Any
    def __init__(self, rounds: Optional[Any] = ..., **kwds: Any) -> None: ...
    @classmethod
    def bitsize(cls, *args: Any, **kwds: Any) -> Any: ...

class ParallelismMixin(GenericHandler):
    parallelism = ...  # type: int
    def __init__(self, parallelism: Optional[Any] = ..., **kwds: Any) -> None: ...

class BackendMixin(PasswordHash):
    backends = ...  # type: Any
    @classmethod
    def get_backend(cls) -> Any: ...
    @classmethod
    def has_backend(cls, name: str = ...) -> Any: ...
    @classmethod
    def set_backend(cls, name: str = ..., dryrun: bool = ...) -> Any: ...

class SubclassBackendMixin(BackendMixin): ...
class HasManyBackends(BackendMixin, GenericHandler): ...

class PrefixWrapper:
    name = ...  # type: Any
    prefix = ...  # type: Any
    orig_prefix = ...  # type: Any
    __doc__ = ...  # type: Any
    def __init__(self, name: Any, wrapped: Any, prefix: Any = ..., orig_prefix: Any = ..., lazy: bool = ..., doc: Optional[Any] = ..., ident: Optional[Any] = ...) -> None: ...
    wrapped = ...  # type: Any
    @property
    def ident(self) -> Any: ...
    @property
    def ident_values(self) -> Any: ...
    def __dir__(self) -> Any: ...
    def __getattr__(self, attr: Any) -> Any: ...
    def __setattr__(self, attr: Any, value: Any) -> Any: ...
    def using(self, **kwds: Any) -> Any: ...
    def needs_update(self, hash: Any, **kwds: Any) -> Any: ...
    def identify(self, hash: Any) -> Any: ...
    def genconfig(self, **kwds: Any) -> Any: ...
    def genhash(self, secret: Any, config: Any, **kwds: Any) -> Any: ...
    def encrypt(self, secret: Any, **kwds: Any) -> Any: ...
    def hash(self, secret: Any, **kwds: Any) -> Any: ...
    def verify(self, secret: Any, hash: Any, **kwds: Any) -> Any: ...
