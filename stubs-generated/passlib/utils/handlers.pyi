# Stubs for passlib.utils.handlers (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc
from passlib.ifc import PasswordHash
from passlib.utils.binary import BASE64_CHARS, HASH64_CHARS, LOWER_HEX_CHARS, PADDED_BASE64_CHARS, UPPER_HEX_CHARS
from typing import Any, Optional

H64_CHARS = HASH64_CHARS
B64_CHARS = BASE64_CHARS
PADDED_B64_CHARS = PADDED_BASE64_CHARS
UC_HEX_CHARS = UPPER_HEX_CHARS
LC_HEX_CHARS = LOWER_HEX_CHARS

def parse_mc2(hash: Any, prefix: Any, sep: Any = ..., handler: Optional[Any] = ...): ...
def parse_mc3(hash: Any, prefix: Any, sep: Any = ..., rounds_base: int = ..., default_rounds: Optional[Any] = ..., handler: Optional[Any] = ...): ...
def render_mc2(ident: Any, salt: Any, checksum: Any, sep: Any = ...): ...
def render_mc3(ident: Any, rounds: Any, salt: Any, checksum: Any, sep: Any = ..., rounds_base: int = ...): ...

class MinimalHandler(PasswordHash, metaclass=abc.ABCMeta):
    @classmethod
    def using(cls, relaxed: bool = ...): ...

class TruncateMixin(MinimalHandler, metaclass=abc.ABCMeta):
    truncate_error: bool = ...
    truncate_verify_reject: bool = ...
    @classmethod
    def using(cls, truncate_error: Optional[Any] = ..., **kwds: Any): ...

class GenericHandler(MinimalHandler):
    setting_kwds: Any = ...
    context_kwds: Any = ...
    ident: Any = ...
    checksum_size: Any = ...
    checksum_chars: Any = ...
    checksum: Any = ...
    use_defaults: Any = ...
    def __init__(self, checksum: Optional[Any] = ..., use_defaults: bool = ..., **kwds: Any) -> None: ...
    @classmethod
    def identify(cls, hash: Any): ...
    @classmethod
    def from_string(cls, hash: Any, **context: Any) -> None: ...
    def to_string(self) -> None: ...
    @classmethod
    def hash(cls, secret: Any, **kwds: Any): ...
    @classmethod
    def verify(cls, secret: Any, hash: Any, **context: Any): ...
    @classmethod
    def genconfig(cls, **kwds: Any): ...
    @classmethod
    def genhash(cls, secret: Any, config: Any, **context: Any): ...
    @classmethod
    def needs_update(cls, hash: Any, secret: Optional[Any] = ..., **kwds: Any): ...
    @classmethod
    def parsehash(cls, hash: Any, checksum: bool = ..., sanitize: bool = ...): ...
    @classmethod
    def bitsize(cls, **kwds: Any): ...

class StaticHandler(GenericHandler):
    setting_kwds: Any = ...
    @classmethod
    def from_string(cls, hash: Any, **context: Any): ...
    def to_string(self): ...

class HasEncodingContext(GenericHandler):
    context_kwds: Any = ...
    default_encoding: str = ...
    encoding: Any = ...
    def __init__(self, encoding: Optional[Any] = ..., **kwds: Any) -> None: ...

class HasUserContext(GenericHandler):
    context_kwds: Any = ...
    user: Any = ...
    def __init__(self, user: Optional[Any] = ..., **kwds: Any) -> None: ...
    @classmethod
    def hash(cls, secret: Any, user: Optional[Any] = ..., **context: Any): ...
    @classmethod
    def verify(cls, secret: Any, hash: Any, user: Optional[Any] = ..., **context: Any): ...
    @classmethod
    def genhash(cls, secret: Any, config: Any, user: Optional[Any] = ..., **context: Any): ...

class HasRawChecksum(GenericHandler): ...

class HasManyIdents(GenericHandler):
    default_ident: Any = ...
    ident_values: Any = ...
    ident_aliases: Any = ...
    ident: Any = ...
    @classmethod
    def using(cls, default_ident: Optional[Any] = ..., ident: Optional[Any] = ..., **kwds: Any): ...
    def __init__(self, ident: Optional[Any] = ..., **kwds: Any) -> None: ...
    @classmethod
    def identify(cls, hash: Any): ...

class HasSalt(GenericHandler):
    min_salt_size: int = ...
    max_salt_size: Any = ...
    salt_chars: Any = ...
    def default_salt_size(cls): ...
    def default_salt_chars(cls): ...
    salt: Any = ...
    @classmethod
    def using(cls, default_salt_size: Optional[Any] = ..., salt_size: Optional[Any] = ..., salt: Optional[Any] = ..., **kwds: Any): ...
    def __init__(self, salt: Optional[Any] = ..., **kwds: Any) -> None: ...
    @classmethod
    def bitsize(cls, salt_size: Optional[Any] = ..., **kwds: Any): ...

class HasRawSalt(HasSalt):
    salt_chars: Any = ...

class HasRounds(GenericHandler):
    min_rounds: int = ...
    max_rounds: Any = ...
    rounds_cost: str = ...
    using_rounds_kwds: Any = ...
    min_desired_rounds: Any = ...
    max_desired_rounds: Any = ...
    default_rounds: Any = ...
    vary_rounds: Any = ...
    rounds: Any = ...
    @classmethod
    def using(cls, min_desired_rounds: Optional[Any] = ..., max_desired_rounds: Optional[Any] = ..., default_rounds: Optional[Any] = ..., vary_rounds: Optional[Any] = ..., min_rounds: Optional[Any] = ..., max_rounds: Optional[Any] = ..., rounds: Optional[Any] = ..., **kwds: Any): ...
    def __init__(self, rounds: Optional[Any] = ..., **kwds: Any) -> None: ...
    @classmethod
    def bitsize(cls, rounds: Optional[Any] = ..., vary_rounds: float = ..., **kwds: Any): ...

class ParallelismMixin(GenericHandler):
    parallelism: int = ...
    @classmethod
    def using(cls, parallelism: Optional[Any] = ..., **kwds: Any): ...
    def __init__(self, parallelism: Optional[Any] = ..., **kwds: Any) -> None: ...

class BackendMixin(PasswordHash, metaclass=abc.ABCMeta):
    backends: Any = ...
    @classmethod
    def get_backend(cls): ...
    @classmethod
    def has_backend(cls, name: str = ...): ...
    @classmethod
    def set_backend(cls, name: str = ..., dryrun: bool = ...): ...

class SubclassBackendMixin(BackendMixin, metaclass=abc.ABCMeta): ...
class HasManyBackends(BackendMixin, GenericHandler): ...

class PrefixWrapper:
    name: Any = ...
    prefix: Any = ...
    orig_prefix: Any = ...
    __doc__: Any = ...
    def __init__(self, name: Any, wrapped: Any, prefix: Any = ..., orig_prefix: Any = ..., lazy: bool = ..., doc: Optional[Any] = ..., ident: Optional[Any] = ...) -> None: ...
    wrapped: Any = ...
    @property
    def ident(self): ...
    @property
    def ident_values(self): ...
    def __dir__(self): ...
    def __getattr__(self, attr: Any): ...
    def __setattr__(self, attr: Any, value: Any): ...
    def using(self, **kwds: Any): ...
    def needs_update(self, hash: Any, **kwds: Any): ...
    def identify(self, hash: Any): ...
    def genconfig(self, **kwds: Any): ...
    def genhash(self, secret: Any, config: Any, **kwds: Any): ...
    def encrypt(self, secret: Any, **kwds: Any): ...
    def hash(self, secret: Any, **kwds: Any): ...
    def verify(self, secret: Any, hash: Any, **kwds: Any): ...
