# Stubs for passlib.apache (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class _CommonFile:
    encoding: Any = ...
    return_unicode: Any = ...
    autosave: bool = ...
    @classmethod
    def from_string(cls, data: Any, **kwds: Any): ...
    @classmethod
    def from_path(cls, path: Any, **kwds: Any): ...
    def __init__(self, path: Optional[Any] = ..., new: bool = ..., autoload: bool = ..., autosave: bool = ..., encoding: str = ..., return_unicode: Any = ...) -> None: ...
    @property
    def path(self): ...
    @path.setter
    def path(self, value: Any) -> None: ...
    @property
    def mtime(self): ...
    def load_if_changed(self): ...
    def load(self, path: Optional[Any] = ..., force: bool = ...): ...
    def load_string(self, data: Any) -> None: ...
    def save(self, path: Optional[Any] = ...) -> None: ...
    def to_string(self): ...

class HtpasswdFile(_CommonFile):
    context: Any = ...
    def __init__(self, path: Optional[Any] = ..., default_scheme: Optional[Any] = ..., context: Any = ..., **kwds: Any) -> None: ...
    def users(self): ...
    def set_password(self, user: Any, password: Any): ...
    def update(self, user: Any, password: Any): ...
    def get_hash(self, user: Any): ...
    def set_hash(self, user: Any, hash: Any): ...
    def find(self, user: Any): ...
    def delete(self, user: Any): ...
    def check_password(self, user: Any, password: Any): ...
    def verify(self, user: Any, password: Any): ...

class HtdigestFile(_CommonFile):
    default_realm: Any = ...
    def __init__(self, path: Optional[Any] = ..., default_realm: Optional[Any] = ..., **kwds: Any) -> None: ...
    def realms(self): ...
    def users(self, realm: Optional[Any] = ...): ...
    def set_password(self, user: Any, realm: Optional[Any] = ..., password: Any = ...): ...
    def update(self, user: Any, realm: Any, password: Any): ...
    def get_hash(self, user: Any, realm: Optional[Any] = ...): ...
    def set_hash(self, user: Any, realm: Optional[Any] = ..., hash: Any = ...): ...
    def find(self, user: Any, realm: Any): ...
    def delete(self, user: Any, realm: Optional[Any] = ...): ...
    def delete_realm(self, realm: Any): ...
    def check_password(self, user: Any, realm: Optional[Any] = ..., password: Any = ...): ...
    def verify(self, user: Any, realm: Any, password: Any): ...
