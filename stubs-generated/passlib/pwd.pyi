# Stubs for passlib.pwd (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import MutableMapping
from typing import Any, Optional

class SequenceGenerator:
    length: Any = ...
    requested_entropy: str = ...
    rng: Any = ...
    symbol_count: Any = ...
    def __init__(self, entropy: Optional[Any] = ..., length: Optional[Any] = ..., rng: Optional[Any] = ..., **kwds: Any) -> None: ...
    def entropy_per_symbol(self): ...
    def entropy(self): ...
    def __next__(self) -> None: ...
    def __call__(self, returns: Optional[Any] = ...): ...
    def __iter__(self): ...
    def next(self): ...

default_charsets: Any

class WordGenerator(SequenceGenerator):
    charset: str = ...
    chars: Any = ...
    def __init__(self, chars: Optional[Any] = ..., charset: Optional[Any] = ..., **kwds: Any) -> None: ...
    def symbol_count(self): ...
    def __next__(self): ...

def genword(entropy: Optional[Any] = ..., length: Optional[Any] = ..., returns: Optional[Any] = ..., **kwds: Any): ...

class WordsetDict(MutableMapping):
    paths: Any = ...
    def __init__(self, *args: Any, **kwds: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def set_path(self, key: Any, path: Any) -> None: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __delitem__(self, key: Any) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __contains__(self, key: Any): ...

default_wordsets: Any

class PhraseGenerator(SequenceGenerator):
    wordset: str = ...
    words: Any = ...
    sep: str = ...
    def __init__(self, wordset: Optional[Any] = ..., words: Optional[Any] = ..., sep: Optional[Any] = ..., **kwds: Any) -> None: ...
    def symbol_count(self): ...
    def __next__(self): ...

def genphrase(entropy: Optional[Any] = ..., length: Optional[Any] = ..., returns: Optional[Any] = ..., **kwds: Any): ...
